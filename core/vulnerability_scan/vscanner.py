import psycopg2
from . import service_detection
from . import port_scanner
from . import database_searcher

class vulnerability_scanner:
    def __init__(self, host, min_port_range, max_port_range, portScan_option, scan_id, threading=0):
        self.host = host
        self.min_port_range = min_port_range
        self.max_port_range = max_port_range
        self.portScan_option = portScan_option
        self.scan_id = scan_id
        self.threading = threading
        try:
            # Connection to the CVE database
            connection = psycopg2.connect(
                host="localhost",
                database="netpackt",  
                user="postgres",
                password="postgres"
            )
            self.connection = connection
            self.cursor = connection.cursor()
        except Exception as e:
            print("Error connecting to database : ", e)
    def vulnerability_scan(self):
        port_scan = port_scanner.portscanner(self.host, self.min_port_range, self.max_port_range, self.threading)
        nmap = service_detection.ServiceScan("core/vulnerability_scan/nmap-service-probes")
        db_query = database_searcher.database_vulnerability_search()
        cve_list = []
        print("start port scan")
        print (self.portScan_option)
        print(self.min_port_range)
        print(self.max_port_range)
        print(self.host)
        
        # connect scan
        if self.portScan_option == 0:
            print('connect scan')
            open_ports = port_scan.tcp_connect()
        else:
            open_ports = port_scan.stealthy_scan()
        print("done port scanning")
        
        #exit and return -1 if no open ports found
        if open_ports == -1:
            self.update_scan_status()
            print('no open ports 11')
            q23 = f'UPDATE scans SET isportscan_empty = 1 WHERE id = {self.scan_id}'
            self.cursor.execute(q23)
            self.connection.commit()   
        else:
            for tcp_port in open_ports:
                cve_found_tcp_port = []
                try:
                    service_enumeration = nmap.scan(self.host, tcp_port, "tcp")
                except:
                    service_enumeration = {}
                print(service_enumeration)

                if len(service_enumeration) > 0 and len(service_enumeration['match']['versioninfo']['cpename']) > 0:
                    cpe_full = service_enumeration['match']['versioninfo']['cpename'][0]
                    cpe_parts = cpe_full.split(":")[-2:]  # Split the string and get the last two parts
                    cpe_proccesed = ":".join(cpe_parts)
                    cpe_proccesed_modified = '%'.join(cpe_proccesed)
                # print(cpe_proccesed_modified)
                    cve_found = db_query.search_cpes(cpe_proccesed_modified)
                    service = service_enumeration['match']['versioninfo']['vendorproductname'][0]
                    version = service_enumeration['match']['versioninfo']['version']
                    for cve_tuple in cve_found:
                        for cve in cve_tuple:
                            if cve not in cve_found_tcp_port:
                                cve_found_tcp_port.append(cve)
                    cve_list.append({'port' : tcp_port, 'service':service,'version':version ,'cves_list':cve_found_tcp_port})
        
            if len(cve_list) > 0:
                self.insert_foundings(cve_list)
                
            else:
                self.update_scan_status()
                no_vulnfound_Query = f"UPDATE scans SET isvulnscan_empty = 1 WHERE id = {self.scan_id}"
                self.cursor.execute(no_vulnfound_Query)
                self.connection.commit()
            
    def insert_foundings(self, cve_list):
        self.update_scan_status()
        for find in cve_list:
            port_number = find['port']
            service = find['service']
            svc_version = ""
            exploitability = 0
            for version in find['version']:
                svc_version = version
            for cve_found in find['cves_list']:
                inser_query = f"INSERT INTO vulnscan_report (scan_id, portnumber, service, version, cve_id, exploitability) VALUES ('{self.scan_id}', '{port_number}', '{service}', '{svc_version}', '{cve_found}', '{exploitability}')"
                self.cursor.execute(inser_query)
                self.connection.commit()
    def update_scan_status(self):
        inser_query = f"UPDATE scans SET progress = 0 where id = {self.scan_id}"
        self.cursor.execute(inser_query)
        self.connection.commit()

            
            
                    
                
        
            

if __name__ == "__main__":
    vscan = vulnerability_scanner("45.33.32.156", 1, 10, 0, 1, 100)
    vscan.vulnerability_scan()