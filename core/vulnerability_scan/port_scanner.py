from logging import getLogger, ERROR
from scapy.all import *
import threading
import socket

class portscanner:
    def __init__(self, host, min_range, max_range, thread_options):
        getLogger("scapy.runtime").setLevel(ERROR)
        self.host = host
        self.min_range = min_range
        self.max_range = max_range
        self.thread_options = thread_options
    
    def stealthy_scan(self):
        ports = range(int(self.min_range), int(self.max_range)+1)
        SYNACK = 0X12
        open_ports = []
        for port in ports:
            srcport = RandShort()
            conf.verb = 0
            SYNACKpkt = sr1(IP(dst=self.host)/TCP(sport=srcport, dport=port, flags="S"), timeout=1)
            if SYNACKpkt is not None:
                pktflags = SYNACKpkt.getlayer(TCP).flags
                if pktflags == SYNACK:
                    open_ports.append(port)
            RSTpkt = IP(dst=self.host)/TCP(sport=srcport, dport=port, flags="R")
            send(RSTpkt)
        return open_ports
    
    def tcp_connect(self):
        open_ports = []
        
        def _scan_ports(start_port, end_port):
            for port in range(start_port, end_port + 1):
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)  # Set timeout to 1 second
                result = sock.connect_ex((self.host, port))
                if result == 0:
                    open_ports.append(port)
                sock.close()

        num_ports = int(self.max_range) - int(self.min_range) + 1
        ports_per_thread = max(num_ports // self.thread_options, 1)
        
        threads = []
        start_port = int(self.min_range)
        
        for _ in range(self.thread_options):
            end_port = min(start_port + ports_per_thread - 1, int(self.max_range))
            thread = threading.Thread(target=_scan_ports, args=(start_port, end_port))
            threads.append(thread)
            thread.start()
            start_port = end_port + 1

        for thread in threads:
            thread.join()
        
        return open_ports

if __name__ == "__main__":
    s = portscanner(1, "192.168.1.1", 1, 100, 100)
    # print(s.stealthy_scan())
    # print(s.tcp_connect())
